=============================================================================
List of generated methods in project: galaxy2012_V0_1

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "TI1"       (bean TimerInt)

Module "AD1"       (bean ADC)
   - AD1_Enable -Enables A/D converter bean. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this method 
                switches on A/D converter device, voltage reference, etc.
   - AD1_Disable -Disables A/D converter bean. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AD1_Start -This method starts continuous conversion on all channels that are set in the component inspector. When each 
                measurement on all channels has finished the <OnEnd > event may be invoked. This method is not available if the 
                <interrupt service> is disabled and the device doesn't support the continuous mode. Note: If time of 
                measurement is too short and the instruction clock is too slow then the conversion complete interrupt and its 
                handler may cause a system overflow.
   - AD1_Stop -This method stops the continuous measurement or disables a trigger mode (if supported by HW), which has been 
                started by one of the following methods:  Version specific information for Freescale ColdFireV1, HCS08, HC08 
                and RS08 derivatives ]     - <Start>     - <EnableIntChanTrigger>    - <EnableExtChanTrigger> Version specific 
                information for Freescale HCS12 and HCS12X derivatives ]     - <Start>    - <EnableExtTrigger>    - 
                <EnableExtChanTrigger>     - <EnableIntTrigger>    - <EnableIntChanTrigger> Version specific information for 
                Freescale 56800 derivatives ]     - <Start>     - <EnableIntTrigger>    - <EnableIntChanTrigger> Version 
                specific information for Freescale MCF derivatives ]     - <Start>     - <EnableExtTrigger>    - 
                <EnableExtChanTrigger> Version specific information not for Freescale 56800 and HCS08 and HC08 and HCS12 and 
                HCS12X derivatives ]     - <Start>     - EnableInt(Chan)Trigger     - EnableExt(Chan)Trigger The Stop method is 
                available if one of the previously mentioned methods is supported by A/D converter device and is enabled to be 
                generated.
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared with 
                <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 1 and 
                <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "PWMC1"     (bean PWMMC)
   - PWMC1_SetDuty -Setting duty (value) register(s) of selected channel. The value is loaded after calling <Load> method.   
                Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   Setting is 
                valid for actual speed mode only, initial value is restored after speed mode change.   Version specific 
                information for Freescale HCS08 and ColdFireV1 derivatives  In center-align mode it is necessary to set both 
                odd and event duty registers separatelly. ]   Duty register(s) value is not affected during speed mode change. 
                It should be handled by the user code.   Version specific information for Freescale 56800/E derivatives - 
                eFlexPWM device ]   Duty register(s) value is not affected during speed mode change. It should be handled by 
                the user code.
   - PWMC1_Load -Apply last setting of the methods <SetDuty>, <SetDutyPercent>, both <SetRatio*>, <SetPeriod> and 
                <SetPrescaler>.   Version specific information for Freescale HCS08 and ColdFireV1 derivatives ]   On FTM 
                peripheral on HCS08 and ColdFireV1 derivatives, <SetPrescaler> is applied immediately and it is not affected by 
                this method.
   - PWMC1_SetRatio16 -This method sets a new duty-cycle ratio for selected channel. The value is loaded after calling <Load> 
                method.   Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   
                Setting is valid for actual speed mode only, initial value is restored after speed mode change.   Version 
                specific information for Freescale HCS08 and ColdFireV1 derivatives ]   Settings is not affected during speed 
                mode change. It should be handled by the user code.   Version specific information for Freescale 56800/E 
                derivatives - eFlexPWM device ]   Settings is not affected during speed mode change. It should be handled by 
                the user code.
   - PWMC1_OutputPadEnable -Method enables output pads.
   - PWMC1_OutputPadDisable -Method disables output pads.

Module "Puls1"     (bean PulseAccumulator)
   - Puls1_Enable -Enables the component.
   - Puls1_Disable -Disables the component.
   - Puls1_ResetCounter -This method resets the pulse accumulator counter (sets to zero).
   - Puls1_GetCounterValue -This method returns the content of the pulse accumulator counter.

Module "Puls2"     (bean PulseAccumulator)
   - Puls2_Enable -Enables the component.
   - Puls2_Disable -Disables the component.
   - Puls2_ResetCounter -This method resets the pulse accumulator counter (sets to zero).
   - Puls2_GetCounterValue -This method returns the content of the pulse accumulator counter.

Module "AS1"       (bean AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read. Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU 
                and the receiver is configured to use DMA controller then this method only sets the selected DMA channel. Then 
                the status of the DMA transfer can be checked using GetCharsInRxBuf method. See an example of a typical usage 
                for details about the communication using DMA.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.  Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets selected DMA channel. Then the status of the DMA transfer can 
                be checked using GetCharsInTxBuf method. See an example of a typical usage for details about communication 
                using DMA.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters. Version specific information for Freescale 56800 derivatives ]   DMA mode:  
                If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then 
                this method only sets the selected DMA channel. Then the status of the DMA transfer can be checked using 
                GetCharsInRxBuf method. See an example of a typical usage for details about communication using DMA.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.  Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets the selected DMA channel. Then the status of the DMA transfer 
                can be checked using GetCharsInTxBuf method. See typical usage for details about communication using DMA.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled. Version specific information for Freescale 56800 derivatives ]   
                DMA mode:  If DMA controller is available on the selected CPU and the receiver is configured to use DMA 
                controller then this method only stops selected DMA channel.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled. Version specific information for Freescale 56800 derivatives ]   
                DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only stops selected DMA channel.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled. Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA 
                controller is available on the selected CPU and the receiver is configured to use DMA controller then this 
                method returns the number of characters in the receive buffer.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled. Version specific information for Freescale 56800 derivatives ]   DMA mode:  If 
                DMA controller is available on the selected CPU and the transmitter is configured to use DMA controller then 
                this method returns the number of characters in the transmit buffer.

Module "Bit1"      (bean BitIO)
   - Bit1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Cpu"       (bean 56F8013VFAE)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.  For more information about the wait mode see this CPU documentation.  
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.  For more information about the stop mode see this CPU documentation.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. Adding read wait states for external program memory can 
                cause delay extension as well. The method is independent on selected speed mode.

===================================================================================
