/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : PWMC1.H
**     Project   : galaxy2012_V0_1
**     Processor : 56F8013VFAE
**     Component : PWMMC
**     Version   : Component 01.703, Driver 01.31, CPU db: 2.87.097
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 2012/6/26, 8:56
**     Abstract  :
**         This bean "PWMMC" implements 6-channel center-aligned or 
**         edge-aligned pulse-width modulator for AC motor control, which 
**         is presented on chip. The device is capable of controlling most 
**         motor types: AC induction motors (ACIM), both brushless (BLDC) 
**         and brush DC motors (BDC), switched (SRM) and variable reluctance  
**         motors (VRM),and stepper motors.
**         Another possibility of using this bean is as a pulse-width modulation 
**         generator that generates 6 signals with variable duty and fixed cycle.
**     Settings  :
**          Component name                                 : PWMC1
**          Device                                         : PWM_Timer
**          Align                                          : center-aligned mode
**          Mode of PWM Pair 0                             : independent
**          Mode of PWM Pair 1                             : independent
**          Mode of PWM Pair 2                             : complementary
**          Top-Side PWM Pair 0 Polarity                   : Positive
**          Top-Side PWM Pair 1 Polarity                   : Positive
**          Top-Side PWM Pair 2 Polarity                   : Positive
**          Bottom-Side PWM Pair 0 Polarity                : Positive
**          Bottom-Side PWM Pair 1 Polarity                : Positive
**          Bottom-Side PWM Pair 2 Polarity                : Positive
**          Write Protect                                  : no
**          Output pads                                    : Enabled
**          Enable in Wait mode                            : no
**          Enable in EnOnCE mode                          : no
**          Reload                                         : 1
**          Half cycle reload                              : no
**          Hardware acceleration                          : Disabled
**          Frequency/period                               : 20 kHz
**          Output Frequency                               : 10 kHz
**          Same frequency in modes                        : no
**          Dead-time                                      : 0 µs
**          Dead-time 1                                    : 0 µs
**          Correction                                     : Enabled
**            Correction                                   : method 1
**            Internal correction logic                    : Disabled
**            PWM pairs                                    : PWM Pair 0, 1, 2
**              PWM Pair 0                                 : top
**              PWM Pair 1                                 : top
**              PWM Pair 2                                 : top
**          Interrupt service/event                        : Disabled
**          Channel 0                                      : 
**            Channel                                      : PWMod0
**            PWM pin                                      : GPIOA0_PWM0
**            PWM pin signal                               : 
**            Duty                                         : 50 %
**            Pin PWM0 active                              : no
**            Output software control                      : no
**            PWM compare invert                           : no
**            Mask channel                                 : no
**            Mask fault 0                                 : yes
**            Mask fault 1                                 : yes
**            Mask fault 2                                 : yes
**            Mask fault 3                                 : yes
**          Channel 1                                      : Enabled
**            Channel                                      : PWMod1
**            PWM pin                                      : GPIOA1_PWM1
**            PWM pin signal                               : 
**            Duty                                         : 50 %
**            Pin PWM1 active                              : no
**            Output software control                      : no
**            PWM compare invert                           : no
**            Mask channel                                 : no
**            Mask fault 0                                 : yes
**            Mask fault 1                                 : yes
**            Mask fault 2                                 : yes
**            Mask fault 3                                 : yes
**          Channel 2                                      : Enabled
**            Channel                                      : PWMod2
**            PWM pin                                      : GPIOA2_PWM2
**            PWM pin signal                               : 
**            Duty                                         : 50 %
**            Pin PWM2 active                              : no
**            Output software control                      : no
**            PWM compare invert                           : no
**            Mask channel                                 : no
**            Mask fault 0                                 : yes
**            Mask fault 1                                 : yes
**            Mask fault 2                                 : yes
**            Mask fault 3                                 : yes
**          Channel 3                                      : Enabled
**            Channel                                      : PWMod3
**            PWM pin                                      : GPIOA3_PWM3
**            PWM pin signal                               : 
**            Duty                                         : 50 %
**            Pin PWM3 active                              : no
**            Output software control                      : no
**            PWM compare invert                           : no
**            Mask channel                                 : no
**            Mask fault 0                                 : yes
**            Mask fault 1                                 : yes
**            Mask fault 2                                 : yes
**            Mask fault 3                                 : yes
**          Channel 4                                      : Disabled
**          Channel 5                                      : Disabled
**          Fault protection                               : controlled by this component
**            Fault 0                                      : Enabled
**              Fault pin                                  : GPIOA6_FAULT0
**              Fault pin signal                           : 
**              Fault clearing mode                        : automatic
**            Fault 1                                      : Enabled
**              Fault pin                                  : GPIOA4_PWM4_FAULT1_T2
**              Fault pin signal                           : 
**              Fault clearing mode                        : automatic
**            Fault 2                                      : Enabled
**              Fault pin                                  : GPIOA5_PWM5_FAULT2_T3
**              Fault pin signal                           : 
**              Fault clearing mode                        : automatic
**            Fault 3                                      : Enabled
**              Fault pin                                  : GPIOB5_T1_FAULT3
**              Fault pin signal                           : 
**              Fault clearing mode                        : automatic
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Events enabled in init.                      : yes
**          CPU clock/speed selection                      : 
**            High speed mode                              : This component enabled
**            Low speed mode                               : This component disabled
**            Slow speed mode                              : This component disabled
**          Simulation output mode                         : PWM
**          High output value                              : 1.0
**          Low output value                               : 0.0
**     Contents  :
**         SetDuty          - byte PWMC1_SetDuty(byte Channel, PWMC1_TPWMMC_Duty Duty);
**         Load             - void PWMC1_Load(void);
**         SetRatio16       - byte PWMC1_SetRatio16(byte Channel, word Ratio);
**         OutputPadEnable  - void PWMC1_OutputPadEnable(void);
**         OutputPadDisable - void PWMC1_OutputPadDisable(void);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __PWMC1
#define __PWMC1

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"

/* MODULE PWMC1. */

#ifndef __BWUserType_PWMC1_TPWMMC_Duty
#define __BWUserType_PWMC1_TPWMMC_Duty
  typedef int PWMC1_TPWMMC_Duty;       /* User type for duty. */
#endif
#ifndef __BWUserType_PWMC1_TDuty
#define __BWUserType_PWMC1_TDuty
  typedef int PWMC1_TDuty;             /* User type for duty. */
#endif
#ifndef __BWUserType_TChannels
#define __BWUserType_TChannels
  typedef struct {
    byte channel0  : 1;                                           /* Channel 0 bit */
    byte channel1  : 1;                                           /* Channel 1 bit */
    byte channel2  : 1;                                           /* Channel 2 bit */
    byte channel3  : 1;                                           /* Channel 3 bit */
    byte channel4  : 1;                                           /* channel 4 bit */
    byte channel5  : 1;                                           /* channel 5 bit */
  } TChannels;                         /* Structure contains bit informations for 6 channels, one bit for each channel. */
#endif
#ifndef __BWUserType_TChannelPairs
#define __BWUserType_TChannelPairs
  typedef struct {
    byte pair0 : 1;                                               /* PWM pair 0 */
    byte pair1 : 1;                                               /* PWM pair 1 */
    byte pair2 : 1;                                               /* PWM pair 2 */
  } TChannelPairs;                     /* 3 channel pairs represented by bit in structure. */
#endif


void PWMC1_SetHigh(void);
/*
** ===================================================================
**     Method      :  PWMC1_SetHigh (component PWMMC)
**
**     Description :
**         The method reconfigures the bean and its selected peripheral(s)
**         when the CPU is switched to the High speed mode. The method is 
**         called automatically as s part of the CPU SetHighSpeed method.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void PWMC1_Init(void);
/*
** ===================================================================
**     Method      :  PWMC1_Init (component PWMMC)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte PWMC1_SetDuty(byte Channel,PWMC1_TPWMMC_Duty Duty);
/*
** ===================================================================
**     Method      :  PWMC1_SetDuty (component PWMMC)
**
**     Description :
**         Setting duty (value) register(s) of selected channel. The
**         value is loaded after calling <Load> method.
**         
**         Version specific information for Freescale 56800/E and HC08
**         and HCS12 and HCS12X derivatives ] 
**         Setting is valid for actual speed mode only, initial value
**         is restored after speed mode change.
**         
**         Version specific information for Freescale 56800/E
**         derivatives - eFlexPWM device ] 
**         Duty register(s) value is not affected during speed mode
**         change. It should be handled by the user code.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number (0 - 5). The number
**                           corresponds to the logical channel number
**                           assigned in the component settings, which
**                           may not correspond to channel number of the
**                           peripheral.
**         Duty            - Duty value for selected channel.
**                           
**                           Writing a number less than or equal to 0
**                           causes the PWM to be off for the entire PWM
**                           period. Writing a number greater than or
**                           equal to the 15 bit (12-bit on HC08MR32 CPU)
**                           modulus causes the PWM to be on for the
**                           entire PWM period.
**                           
**                           Version specific information for Freescale
**                           56800/E derivatives - eFlexPWM device ] 
**                           Parameter duty is an unsigned value. 
**                           - _edge-aligned mode:_ parameter value is
**                           written into PWM clear-edge
**                           (eFlexPWM_SMn_FRACVALx) register; PWM
**                           set-edge (eFlexPWM_SMn_FRACVALx) register
**                           is not affected (zero value assumed); where
**                           x = 2, 4. 
**                           - _center-aligned mode:_ parameter value is
**                           split between PWM set-edge
**                           (eFlexPWM_SMn_FRACVALx) and PWM clear-edge
**                           (eFlexPWM_SMn_FRACVAL(x+1)) registers;
**                           where x = 2, 4.
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_NOTAVAIL - Channel is disabled 
**                           - ERR_RANGE - Parameter Channel is out of
**                           range
** ===================================================================
*/

#define PWMC1_Load() setRegBit(PWM_PMCTL,LDOK)
/*
** ===================================================================
**     Method      :  PWMC1_Load (component PWMMC)
**
**     Description :
**         Apply last setting of the methods <SetDuty>, <SetDutyPercent>,
**         both <SetRatio*>, <SetPeriod> and <SetPrescaler>.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define PWMC1_OutputPadEnable() setRegBit(PWM_PMOUT,PAD_EN)
/*
** ===================================================================
**     Method      :  PWMC1_OutputPadEnable (component PWMMC)
**
**     Description :
**         Method enables output pads.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define PWMC1_OutputPadDisable() clrRegBit(PWM_PMOUT,PAD_EN)
/*
** ===================================================================
**     Method      :  PWMC1_OutputPadDisable (component PWMMC)
**
**     Description :
**         Method disables output pads.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

byte PWMC1_SetRatio16(byte Channel,word Ratio);
/*
** ===================================================================
**     Method      :  PWMC1_SetRatio16 (component PWMMC)
**
**     Description :
**         This method sets a new duty-cycle ratio for selected channel.
**         The value is loaded after calling <Load> method.
**         
**         Version specific information for Freescale 56800/E and HC08
**         and HCS12 and HCS12X derivatives ] 
**         Setting is valid for actual speed mode only, initial value
**         is restored after speed mode change.
**         
**         Version specific information for Freescale 56800/E
**         derivatives - eFlexPWM device ] 
**         Settings is not affected during speed mode change. It should
**         be handled by the user code.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - channel number (0 - 5). The number
**                           corresponds to the logical channel number
**                           assigned in the component settings, which
**                           may not correspond to channel number of the
**                           peripheral.
**         Ratio           - Ratio is expressed as an 16-bit
**                           unsigned integer number. 0 - 65535 value is
**                           proportional to ratio 0 - 100%.
**                           
**                           Version specific information for Freescale
**                           56800/E derivatives - eFlexPWM device ] 
**                           - _edge-aligned mode:_ value computed from
**                           parameter is written into PWM clear-edge
**                           (eFlexPWM_SMn_FRACVALx) register; PWM
**                           set-edge (eFlexPWM_SMn_FRACVALx) register
**                           is not affected (zero value assumed); where
**                           x = 2, 4. 
**                           - _center-aligned mode:_ value computed
**                           from parameter value is split between PWM
**                           set-edge (eFlexPWM_SMn_FRACVALx) and PWM
**                           clear-edge (eFlexPWM_SMn_FRACVAL(x+1))
**                           registers; where x = 2, 4.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_NOTAVAIL - Channel is disabled
**                           ERR_RANGE - Parameter Channel is out of
**                           range
** ===================================================================
*/

/* END PWMC1. */

#endif /* ifndef __PWMC1 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
